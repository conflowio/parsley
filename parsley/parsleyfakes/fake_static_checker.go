// Code generated by counterfeiter. DO NOT EDIT.
package parsleyfakes

import (
	"sync"

	"github.com/opsidian/parsley/parsley"
)

type FakeStaticChecker struct {
	StaticCheckStub        func(ctx interface{}, node parsley.NonTerminalNode) (string, parsley.Error)
	staticCheckMutex       sync.RWMutex
	staticCheckArgsForCall []struct {
		ctx  interface{}
		node parsley.NonTerminalNode
	}
	staticCheckReturns struct {
		result1 string
		result2 parsley.Error
	}
	staticCheckReturnsOnCall map[int]struct {
		result1 string
		result2 parsley.Error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStaticChecker) StaticCheck(ctx interface{}, node parsley.NonTerminalNode) (string, parsley.Error) {
	fake.staticCheckMutex.Lock()
	ret, specificReturn := fake.staticCheckReturnsOnCall[len(fake.staticCheckArgsForCall)]
	fake.staticCheckArgsForCall = append(fake.staticCheckArgsForCall, struct {
		ctx  interface{}
		node parsley.NonTerminalNode
	}{ctx, node})
	fake.recordInvocation("StaticCheck", []interface{}{ctx, node})
	fake.staticCheckMutex.Unlock()
	if fake.StaticCheckStub != nil {
		return fake.StaticCheckStub(ctx, node)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.staticCheckReturns.result1, fake.staticCheckReturns.result2
}

func (fake *FakeStaticChecker) StaticCheckCallCount() int {
	fake.staticCheckMutex.RLock()
	defer fake.staticCheckMutex.RUnlock()
	return len(fake.staticCheckArgsForCall)
}

func (fake *FakeStaticChecker) StaticCheckArgsForCall(i int) (interface{}, parsley.NonTerminalNode) {
	fake.staticCheckMutex.RLock()
	defer fake.staticCheckMutex.RUnlock()
	return fake.staticCheckArgsForCall[i].ctx, fake.staticCheckArgsForCall[i].node
}

func (fake *FakeStaticChecker) StaticCheckReturns(result1 string, result2 parsley.Error) {
	fake.StaticCheckStub = nil
	fake.staticCheckReturns = struct {
		result1 string
		result2 parsley.Error
	}{result1, result2}
}

func (fake *FakeStaticChecker) StaticCheckReturnsOnCall(i int, result1 string, result2 parsley.Error) {
	fake.StaticCheckStub = nil
	if fake.staticCheckReturnsOnCall == nil {
		fake.staticCheckReturnsOnCall = make(map[int]struct {
			result1 string
			result2 parsley.Error
		})
	}
	fake.staticCheckReturnsOnCall[i] = struct {
		result1 string
		result2 parsley.Error
	}{result1, result2}
}

func (fake *FakeStaticChecker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.staticCheckMutex.RLock()
	defer fake.staticCheckMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStaticChecker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ parsley.StaticChecker = new(FakeStaticChecker)
