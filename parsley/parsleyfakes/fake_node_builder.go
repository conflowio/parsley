// Code generated by counterfeiter. DO NOT EDIT.
package parsleyfakes

import (
	"sync"

	"github.com/opsidian/parsley/parsley"
)

type FakeNodeBuilder struct {
	BuildNodeStub        func([]parsley.Node) parsley.Node
	buildNodeMutex       sync.RWMutex
	buildNodeArgsForCall []struct {
		arg1 []parsley.Node
	}
	buildNodeReturns struct {
		result1 parsley.Node
	}
	buildNodeReturnsOnCall map[int]struct {
		result1 parsley.Node
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodeBuilder) BuildNode(arg1 []parsley.Node) parsley.Node {
	var arg1Copy []parsley.Node
	if arg1 != nil {
		arg1Copy = make([]parsley.Node, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.buildNodeMutex.Lock()
	ret, specificReturn := fake.buildNodeReturnsOnCall[len(fake.buildNodeArgsForCall)]
	fake.buildNodeArgsForCall = append(fake.buildNodeArgsForCall, struct {
		arg1 []parsley.Node
	}{arg1Copy})
	fake.recordInvocation("BuildNode", []interface{}{arg1Copy})
	fake.buildNodeMutex.Unlock()
	if fake.BuildNodeStub != nil {
		return fake.BuildNodeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.buildNodeReturns.result1
}

func (fake *FakeNodeBuilder) BuildNodeCallCount() int {
	fake.buildNodeMutex.RLock()
	defer fake.buildNodeMutex.RUnlock()
	return len(fake.buildNodeArgsForCall)
}

func (fake *FakeNodeBuilder) BuildNodeArgsForCall(i int) []parsley.Node {
	fake.buildNodeMutex.RLock()
	defer fake.buildNodeMutex.RUnlock()
	return fake.buildNodeArgsForCall[i].arg1
}

func (fake *FakeNodeBuilder) BuildNodeReturns(result1 parsley.Node) {
	fake.BuildNodeStub = nil
	fake.buildNodeReturns = struct {
		result1 parsley.Node
	}{result1}
}

func (fake *FakeNodeBuilder) BuildNodeReturnsOnCall(i int, result1 parsley.Node) {
	fake.BuildNodeStub = nil
	if fake.buildNodeReturnsOnCall == nil {
		fake.buildNodeReturnsOnCall = make(map[int]struct {
			result1 parsley.Node
		})
	}
	fake.buildNodeReturnsOnCall[i] = struct {
		result1 parsley.Node
	}{result1}
}

func (fake *FakeNodeBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildNodeMutex.RLock()
	defer fake.buildNodeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNodeBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ parsley.NodeBuilder = new(FakeNodeBuilder)
